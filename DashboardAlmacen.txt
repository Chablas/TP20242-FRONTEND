import React, { useEffect, useState } from 'react';
import DashboardAlmacenFila from "./DashboardAlmacenFila";
import Swal from "sweetalert2";

export default function Almacen() {
    const [id, setId] = useState('');
    const [nombre, setNombre] = useState('');
    const [ubicacion, setUbicacion] = useState('');
    const [almacenes, setAlmacenes] = useState([]); // Estado para almacenar la lista de almacenes

    const abrirModal = () => {
        document.getElementById('modalAgregar').classList.remove('hidden');
        document.getElementById('tituloModal').textContent = 'Registrar Almacén';
    };

    const cerrarModal = () => {
        const modales = document.querySelectorAll("div.btnCerrarModal");
        for (const modal of modales) {
            modal.classList.add('hidden');
        }
        // Limpiar campos
        setId('');
        setNombre('');
        setUbicacion('');
    };

    const validarNombreDuplicado = (nuevoNombre) => {
        return almacenes.some(almacen => almacen.props.nombre.toLowerCase() === nuevoNombre.toLowerCase());
    };

    const enviarDatos = async (e) => {
        e.preventDefault(); // Prevenir el comportamiento por defecto del formulario

        // Validación de campos
        if (!nombre.trim() || !ubicacion.trim()) {
            Swal.fire({
                title: 'Error',
                text: 'Todos los campos son obligatorios.',
                icon: 'error'
            });
            return; // Salir si hay campos vacíos
        }

        // Validación de nombre duplicado
        if (validarNombreDuplicado(nombre)) {
            Swal.fire({
                title: 'Error',
                text: 'El nombre del almacén ya existe.',
                icon: 'error'
            });
            return; // Salir si hay nombre duplicado
        }

        try {
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const cuerpo = JSON.stringify({ nombre, ubicacion });

            const request = new Request("https://compusave-backend.onrender.com/post/almacen", {
                method: "POST",
                headers: headers,
                body: cuerpo,
            });

            const response = await fetch(request);
            const resultado = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: `${resultado.detail}`,
                    icon: "success"
                });
                obtenerDatos(); // Refrescar la lista de almacenes
                cerrarModal(); // Cerrar modal
            } else {
                Swal.fire({
                    title: `${resultado.detail}`,
                    icon: "error"
                });
            }
        } catch (error) {
            Swal.fire({
                title: 'Ocurrio un error...',
                icon: 'error'
            });
        }
    };

    const editarDatos = async (e) => {
        e.preventDefault(); // Prevenir el comportamiento por defecto del formulario

        if (!nombre.trim() || !ubicacion.trim()) {
            Swal.fire({
                title: 'Error',
                text: 'Todos los campos son obligatorios.',
                icon: 'error'
            });
            return; // Salir si hay campos vacíos
        }

        // Validación de nombre duplicado, pero solo si el nombre ha cambiado
        if (validarNombreDuplicado(nombre) && nombre !== almacenes.find(almacen => almacen.props.id === id)?.props.nombre) {
            Swal.fire({
                title: 'Error',
                text: 'El nombre del almacén ya existe.',
                icon: 'error'
            });
            return; // Salir si hay nombre duplicado
        }

        try {
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const cuerpo = JSON.stringify({ nombre, ubicacion });

            const request = new Request(`https://compusave-backend.onrender.com/put/almacen/${id}`, {
                method: "PUT",
                headers: headers,
                body: cuerpo,
            });

            const response = await fetch(request);
            const resultado = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: `${resultado.detail}`,
                    icon: "success"
                });
                obtenerDatos(); // Refrescar la lista de almacenes
                cerrarModal(); // Cerrar modal
            } else {
                Swal.fire({
                    title: `${resultado.detail}`,
                    icon: "error"
                });
            }
        } catch (error) {
            Swal.fire({
                title: 'Ocurrio un error...',
                icon: 'error'
            });
        }
    };

    const eliminarDatos = async (id) => {
        try {
            const request = new Request(`https://compusave-backend.onrender.com/delete/almacen/${id}`, {
                method: "DELETE",
            });

            const response = await fetch(request);
            const resultado = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: `${resultado.detail}`,
                    icon: "success"
                });
                obtenerDatos(); // Refrescar la lista de almacenes
            } else {
                Swal.fire({
                    title: `${resultado.detail}`,
                    icon: "error"
                });
            }
        } catch (error) {
            console.error('Error en la conexión con el servidor:', error);
        }
    };

    const obtenerDatos = async () => {
        try {
            const request = new Request("https://compusave-backend.onrender.com/get/almacenes", {
                method: "GET",
            });
            const response = await fetch(request);
            const datos = await response.json();

            const filas = datos.map((x, index) => (
                <DashboardAlmacenFila 
                    key={x.id} 
                    {...x} 
                    setId={setId} 
                    setNombre={setNombre} 
                    setUbicacion={setUbicacion} 
                    eliminarDatos={eliminarDatos} 
                    index={index + 1} 
                />
            ));

            setAlmacenes(filas);
        } catch (error) {
            console.error("Error al obtener los datos:", error);
        }
    };

    useEffect(() => {
        obtenerDatos();
    }, []);

    return (
        <>
            {/* Modal para agregar almacén */}
            <div id="modalAgregar" className="fixed inset-0 bg-gray-900 bg-opacity-50 hidden flex justify-center items-center z-50 btnCerrarModal">
                <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
                    <h2 className="text-xl font-bold mb-4">Registrar Almacén</h2>
                    <form onSubmit={enviarDatos}>
                        <div className="mb-4">
                            <label htmlFor="nombreAlmacen" className="block text-gray-700">Nombre de Almacén</label>
                            <input type="text" id="nombreAlmacen" value={nombre} onChange={(e) => setNombre(e.target.value)} className="w-full px-4 py-2 border rounded-lg" required />
                        </div>
                        <div className="mb-4">
                            <label htmlFor="ubicacionAlmacen" className="block text-gray-700">Dirección</label>
                            <textarea id="ubicacionAlmacen" value={ubicacion} onChange={(e) => setUbicacion(e.target.value)} className="w-full px-4 py-2 border rounded-lg" rows="4" required />
                        </div>
                        <div className="flex justify-end space-x-4">
                            <button type="button" className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600" onClick={cerrarModal}>Cancelar</button>
                            <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Guardar</button>
                        </div>
                    </form>
                </div>
            </div>

            {/* Sección principal */}
            <main className="p-6">
                <h1 className="border-b-2 border-b-gray-200 text-3xl pb-5 font-bold text-gray-700 mb-4">Gestión de Almacenes</h1>
                <div className="mt-5">
                    <button className="bg-green-500 text-white font-semibold px-4 py-2 rounded hover:bg-green-400 mb-4" onClick={abrirModal}>
                        Agregar nuevo almacén
                    </button>
                </div>

                <div className="overflow-x-auto">
                    <table className="min-w-full bg-[#212936] shadow-md rounded-lg overflow-hidden">
                        <thead className="bg-[#394050]">
                            <tr>
                                <th className="py-3 px-4 text-left font-semibold text-gray-300">ID</th>
                                <th className="py-3 px-4 text-left font-semibold text-gray-300">NOMBRE</th>
                                <th className="py-3 px-4 text-center font-semibold text-gray-300">UBICACIÓN</th>
                                <th className="py-3 px-4 text-center font-semibold text-gray-300">ACCIONES</th>
                            </tr>
                        </thead>
                        <tbody>
                            {almacenes}
                        </tbody>
                    </table>
                </div>
            </main>
        </>
    );
}
